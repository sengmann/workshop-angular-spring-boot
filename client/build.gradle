apply plugin: "com.github.node-gradle.node"

node {
    // Version of node to use.
    version = '14.12.0'

    // Version of npm to use.
    npmVersion = '6.14.8'

    download = true
}

// define, where ng puts customer's build output
def targetDir = new File(project.buildDir, "ng")
def resourcesDir = new File ("webapp")


task npmWatch(type: NpmTask) {
    dependsOn npmInstall
    args = ['run', 'start']
}

task npmRunTest(type: NpmTask) {
    args = ['run', 'test']
}

task npmRunCiTest(type: NpmTask) {
    args = ['run', 'test:coverage']
}

task cleanNgCli(type: Delete) {
    delete "build", "node_modules", "generated"
}

// define the content of the webfragment
jar {
    into('META-INF/resources') {
        from targetDir
    }
    from resourcesDir
}

// needed because gradle detects npmInstall as up to date when node_modules is missing and package.json has not changed
tasks.npmInstall.outputs.upToDateWhen {false}

task ngBundle(type: NpmTask) {
    inputs.files(fileTree('node_modules'))
    inputs.files(fileTree('src'))
    inputs.file('package.json')
    inputs.file('package-lock.json')

    outputs.dir(targetDir)

    dependsOn npmInstall
    args = ["run", "build"]
}

// wire gradle plugin lifecycles
clean  .dependsOn cleanNgCli
classes  .dependsOn ngBundle
test   .dependsOn npmRunCiTest
